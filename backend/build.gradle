import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
	id "org.springframework.boot" version "${springBootVersion}"
	id 'java'
	id 'jacoco'
	id 'org.checkerframework' version '0.5.12'
	id 'info.solidsoft.pitest' version '1.5.2'
}

group = 'io.spring.cloud.samples.animalrescue'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = 11
targetCompatibility = 11

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

build.dependsOn('pitest')

checkerFramework {
	excludeTests = true
	checkers = [
			'org.checkerframework.checker.nullness.NullnessChecker',
	]
}

repositories {
	mavenCentral()
}

dependencies {
	implementation enforcedPlatform(SpringBootPlugin.BOM_COORDINATES)
	developmentOnly enforcedPlatform(SpringBootPlugin.BOM_COORDINATES)

	developmentOnly "org.springframework.boot:spring-boot-devtools"

	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	implementation 'org.springframework.boot:spring-boot-starter-security'

    runtimeOnly 'com.h2database:h2'

	testImplementation 'org.pitest:pitest-junit5-plugin:0.12'
	testImplementation('org.springframework.security:spring-security-test')
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation('org.seleniumhq.selenium:htmlunit-driver')
	testImplementation('org.seleniumhq.selenium:selenium-java')
}

pitest {
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = false
	junit5PluginVersion = '0.12'
//	mainSourceSets = [project.sourceSets.main, project(':shared').sourceSets.main]
//	additionalMutableCodePaths = [configurations.mutableCodeBase.singleFile]
}

test {
	useJUnitPlatform()
	testLogging {
		exceptionFormat = "full"
		events = ["passed", "skipped", "failed"]
	}
}

jacocoTestReport {
	dependsOn test
    reports {
        xml.enabled true
		xml.destination new File("${buildDir}/reports/jacoco/report.xml")
		html.enabled false
		csv.enabled false
    }
}
